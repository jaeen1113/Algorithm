/*
You should use the statndard input/output

in order to receive a score properly.

Do not use file input and output

Please be very careful.
*/

// 이 방법으로 하니까 메모리 공간을 너무 잡아먹음. 하다가 터짐
#include <iostream>
#include <vector>
#pragma warning(disable:4996)
using namespace std;

int Answer;
vector< vector<int> > board;

int main(int argc, char** argv)
{
	int T, test_case;
	int N, M, K;
	int z1, z2;
	int value = 1;

	vector<int> temp;
	//freopen("sample_input.txt", "r", stdin);

	cin >> T;

	for (test_case = 0; test_case < T; test_case++)
	{
		cin >> N;
		cin >> M;
		cin >> K;
		Answer = 0;
		value = 1;
		board.clear();

		temp.resize(M);
		board.resize(N, temp);
	    temp.clear();
		

		for (int i = 0; i < K; i++)	// 장애물 setting
		{
			cin >> z1;
			cin >> z2;
			if (z1 - 1 < N && z2 - 1 < M)		// 체스판 밖에 있는 장애물도 있다함 ...ㅁㅊ...
				board[z1 - 1][z2 - 1] = -1;
		}

		for (int i = 0; i < M; i++)			// 위쪽 1줄을 1로 채움
		{
			if (board[0][i] == -1)
			{
				value = 0;
				continue;
			}
			board[0][i] = value;
		}
		value = 1;
		for (int i = 0; i < N; i++)			// 왼쪽 1줄을 1로 채움
		{
			if (board[i][0] == -1)
			{
				value = 0;
				continue;
			}
			board[i][0] = value;
		}

		////////////////////////////////////////////////////////


		for (int i = 1; i < N; i++)
		{
			for (int j = 1; j < M; j++)
			{
				if (board[i][j] == -1) continue;

				else if (board[i][j - 1] == -1 && board[i - 1][j] != -1)				// 현 위치 왼쪽칸이 막혀있고 위만 뚤려있다면
					board[i][j] = board[i - 1][j];
				else if (board[i][j - 1] != -1 && board[i - 1][j] == -1)				// 현 위치 왼쪽칸이 안막혀있고 위가 막혀있따면
					board[i][j] = board[i][j - 1];
				else if (board[i - 1][j] == -1 && board[i][j - 1] == -1)				// 현 위치 왼쪽칸, 위쪽칸 모두 막혀있다면?
					board[i][j] = 0;
				else
					board[i][j] = (board[i][j - 1] + board[i - 1][j])% 1000000007;

				//cout << i << " x " << j << " : " << board[i][j] << endl;
			}
		}

		Answer = board[N - 1][M - 1];

		// Print the answer to standard output(screen).
		cout << "Case #" << test_case + 1 << endl;
		cout << Answer % 1000000007 << endl;
	}

	return 0;//Your program should return 0 on normal termination.
}