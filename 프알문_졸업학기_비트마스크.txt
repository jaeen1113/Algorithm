#include <iostream>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <cmath>
#define YES (1<<26)-1
#pragma warning(disable:4996)
using namespace std;
int C, N, M, K, L;
int done_list = 0;
int prereq[30] = { 0, };
int semeter[30] = {0,};
int bit_count(int a) {
	int ret = 0;
	int temp = a;
	for (int i = 0; i < 32; i++) 
		if ((temp >> i) & 1) 
			ret++;
	
	return ret;
}
int solve() {
	int ret = 0;
	for (int i = 0; i < M; i++)
	{
		if (bit_count(done_list) >= K) return ret; // K개 이상의 과목을 수강했으면 return

		int current_done_list = 0;

		if ((done_list | semeter[i]) == done_list) continue;	// 이번학기에 배울 강의가 없으면  

		for (int j = 0; j < N; j++) {	// 현재 학기의 모든 강의들을 돌면서 확인


			if (!((1 << j) & semeter[i])) continue;// 현재학기에 j번 과목이 없으면 다음번 과목 확인 ㄱㄱ 

			if(((1 << j) & semeter[i])&done_list) continue;// j번 과목을 이미 들었으면 pass

			if (!prereq[j]) // j번 과목의 선행 교과목이 없으면 
				current_done_list |= 1 << j;
			else {
				bool can = true;
				for (int k = 0; k < N; k++) // j번 과목에 선행과목이 존재하면 done_list와 비교해서 들을수 있는지 확인해본다.
				{
					if (!(prereq[j] & (1 << k)))	continue;// k과목이 j의 선행과목이 아니면 pass

					if (!((done_list & (1 << k)) && (prereq[j] & (1 << k)))) {// 하나라도 선행과목 이수가 안됬다면 break
						can = false;
						break;
					}
				}
				// 선행과목 모두 이수시 현 과목 done_list에 추가
				if(can) current_done_list |= 1 << j;
			}
		}

		ret++; //이번학기는 여기에서 시마이 ㅎ...
		done_list |= current_done_list;
	}

	return ret;
}
int main() {
	freopen("sample_input.txt", "r", stdin);
	cin >> C;
		
	for (int z = 0; z < C; z++) {
		cin >> N >> K >> M >> L;
		int temp;
		for (int i = 0; i < N; i++)
		{
			cin >> temp;
			for (int j = 0; j < temp; j++)
			{
				int a;
				cin >> a;
				prereq[i] |= (1 << a);
			}
		}

		for (int i = 0; i < M; i++)
		{
			cin >> temp;

			for (int j = 0; j < temp; j++)
			{
				int a;
				cin >> a;
				semeter[i] |= (1 << a);
			}
		}

		temp = solve();

		if (!temp) cout << "IMPOSSIBLE" << endl;
		else
			cout << "최소 " << temp << "학기를 다녀야합니다~~ ^^7" << endl;





	}
	
}