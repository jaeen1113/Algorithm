#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
using namespace std;
#pragma warning(disable:4996)

queue<int> q;
stack<int> s;

vector<int> node[1001];
bool visit[1001];

void bfs(int st) {
	memset(visit, false, sizeof(visit));
	cout << st << " ";
	visit[st] = true;
	q.push(st);

	while (!q.empty()) {
		int current = q.front();
		
		q.pop();
		for (int i = 0; i < node[current].size(); i++) {
			int next = node[current][i];
			if (visit[next] == false)
			{
				visit[next] = true;
				cout << next << " ";
				q.push(next);
			}
		}
	}
}
void dfs(int st) {
	memset(visit, false, sizeof(visit));
	s.push(st);

	while (!s.empty()) {
		int current = s.top();
		s.pop();

		if (visit[current]) continue;

		cout << current << " ";
		visit[current] = true;
		
		
		for (int i = node[current].size()-1; i>= 0; i--) {
			int next = node[current][i];
			if (visit[next] == false)
				s.push(next);
			
		}
	}
}

int main() {
	//freopen("sample_input.txt", "r", stdin);
	int n, m, s;
	cin >> n >> m >> s;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		node[a].push_back(b);
		node[b].push_back(a);
	}
	
	dfs(s);
	cout << endl;

	bfs(s);
	cout << endl;


}