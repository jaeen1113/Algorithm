#include <iostream>
#include <cstring>
using namespace std;
#pragma warning(disable:4996)
int map[1000][1000];
int check[1000][1000];

int t, n;
int addx[4] = {0 , 0, 1, -1};
int addy[4] = {1, -1, 0,  0};


int dp(int y, int x) {
	int& ret = check[y][x];

	if (ret != -1) return ret;

	bool cant = false;

	for (int i = 0; i < 4; i++) { // 4방위 중에서 
		int nx = x + addx[i];
		int ny = y + addy[i];

	
		if (nx >= 0 && ny >= 0 && nx < n && ny < n && (map[ny][nx] == map[y][x] + 1)) { // 이동 가능한 곳이 있으면 
			int temp = dp(ny, nx); // 그 지점에서의 최대 이동 가능 값을 받아오고
			ret = ret > temp ? ret : temp; // 그게 현재꺼 보다 크면 그걸로 바꿈
			cant = true;
		}
	}

	ret += 1;

	if (!cant)
		return (ret = 1);

	return ret;
}

int main() {
	freopen("input.txt" , "r", stdin);
	cin >> t;

	for (int i = 0; i < t; i++) {
		memset(map, 0, sizeof(map));
		memset(check, -1 , sizeof(check));
		cin >> n;

		for (int j = 0; j < n; j++) {
			for (int k = 0; k < n; k++) {
				cin >> map[j][k];
			}
		}
		
		int ret = 0;
		int rx = 0, ry = 0;
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < n; k++) {
				if (check[j][k] == -1)
				{
					dp(j, k);
					if ((check[j][k] > check[ry][rx]) || (check[j][k] == check[ry][rx]) && (map[j][k] < map[ry][rx]))
					{
						ry = j; rx = k;
					}
				}
					
			}
		}

		cout << "#" << i + 1 << " " << map[ry][rx] << " " << check[ry][rx] << endl;
		
	}
}