#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;
int width, height;
int check[52][52];
int map[52][52];

vector< pair<int, int> > leaf; // 시작 가능한 지점들 
queue< pair<int ,int> > q;
int addx[4] = {0,0, 1, -1};
int addy[4] = {1, -1,0,0};
int max2(int a, int b) {
	return a > b ? a : b;
}

void find_leaf() {
	for (int i = 1; i < height - 1; i++) {
		for (int j = 1; j < width - 1; j++) {
			int sum = map[i][j+1] + map[i][j-1] + map[i+1][j] + map[i-1][j]; // 모서리 내지 꼭지지점에서만 시작함
			if (map[i][j] == 1 && sum <= 2)
				leaf.push_back(pair<int, int>(i, j));	// 현 지점의 좌표를 leaf에 넣음
		}
	}
}
int bfs(int y, int x) {
	int jmp = 0;
	q.push(pair<int, int>(y, x));
	check[y][x] = 0;
	pair<int, int> temp;
	while (!q.empty()) {
		temp = q.front();
		q.pop();
	
		for (int i = 0; i < 4; i++) {
			int next_x = temp.second + addx[i];
			int next_y = temp.first + addy[i];

			if (check[next_y][next_x] > 0 || map[next_y][next_x] == 0) continue; // 이미 지나온 곳이나 벽이면 이동 x

			q.push(pair<int, int>(next_y, next_x));
			check[next_y][next_x] = check[temp.first][temp.second]+1;
		}
	}
	return check[temp.first][temp.second];
}
int main() {
	freopen("sample_input.txt", "r", stdin);
	cin >> height >> width;
	height += 2; width += 2; // padding
	memset(check, -1, sizeof(check));

	for (int i = 1; i < height-1; i++){
		for (int j = 1; j < width - 1; j++) {
			char temp;
			cin >> temp;
			if (temp == 'L')
				map[i][j] = 1;
		}
	}

	find_leaf();
	int ret = 0;
	for (int i = 0; i < leaf.size(); i++)
	{
		memset(check, -1, sizeof(check));
		ret = max2(ret, bfs(leaf[i].first, leaf[i].second));
	}
	
	cout << ret;




}