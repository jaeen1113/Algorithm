#include <iostream>
#include <cstring>
#include <queue>
#include <vector>
#pragma warning(disable:4996)

using namespace std;

int n, m;
int map[8][8];
int temp_map[8][8];
int ax[4] = {0,0,1,-1};
int ay[4] = {1, -1, 0,0};
bool visit[8][8];

vector<pair<int, int> > safe_area;
queue<pair<int, int> > virus;

int max2(int a, int b) {
	return a > b ? a : b;
}


int count_area() {
	int ret = 0;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (temp_map[i][j] == 0)
				ret++;
	return ret;
}

int bfs() {
	queue<pair<int, int> > q = virus;

	while (!q.empty()) {
		int cx = q.front().second;
		int cy = q.front().first;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = cy + ay[i];
			int nx = cx + ax[i];
			if (nx >= 0 && ny >= 0 && nx < m && ny < n && temp_map[ny][nx] == 0)
			{
				temp_map[ny][nx] = 2;
				q.push(pair<int, int>(ny, nx));
			}
		}
	}

	return count_area();
}
// а╤гу
int solve(int picked, int current) {
	if (picked == 3) {
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				temp_map[i][j] = map[i][j];

		int temp = bfs();
		return temp;

	}
	int ret = 0;

	for (int i = current; i < safe_area.size(); i++) {
		pair<int, int> t = safe_area[i];
		map[t.first][t.second] = 1;
		ret = max2(ret, solve(picked + 1, i + 1));
		map[t.first][t.second] = 0;
	}

	return ret;
}

int main() {
	freopen("input.txt", "r", stdin);
	cin >> n >> m;
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			cin >> map[i][j];
			if (map[i][j] == 0) {
				safe_area.push_back(pair<int, int>(i,j));
			}
			if (map[i][j] == 2)
			{
				virus.push(pair<int, int>(i, j));
			}
		}
	}
	cout << solve(0, 0);
	
}